import {
  Controller,
  Get,
  Post,
  Body,
  Param,
  Delete,
  Patch,
} from '@nestjs/common';
import { QuestionService } from './question.service';

@Controller('question')
export class QuestionController {
  constructor(private readonly questionService: QuestionService) {}

  // returns a list of all questions
  @Get()
  async getQuestions() {
    const Questions = await this.questionService.getQuestions();
    return Questions;
  }

  // returns a single question given an id
  //@param id, the id of the question
  @Get(':id')
  getQuestion(@Param('id') questId: string) {
    return this.questionService.getSingleQuestion(questId);
  }

  /* Adds a question to the database
   * @body question: string required
   * @body answer: string required
   * @body points: number required
   * returns the id generated by mongodb atlas
   */
  @Post()
  async addQuestion(
    @Body('question') bodQuestion: string,
    @Body('answer') bodAnswer: string,
    @Body('points') bodPoints: number,
  ) {
    const generatedId = await this.questionService.insertQuestion(
      bodQuestion,
      bodAnswer,
      bodPoints,
    );
    return { id: generatedId };
  }

  /* Deletes a question given an id
   * @param id the id of the question to be deleted
   */
  @Delete(':id')
  async deleteQuestion(@Param('id') questId: string) {
    await this.questionService.deleteProduct(questId);
    return null;
  }

  /* Updates a question by its id but only updates the given fields
   * @body question: string
   * @body answer: string
   * @body points: number
   */
  @Patch(':id')
  async updateQuestion(
    @Param('id') questId: string,
    @Body('question') question: string,
    @Body('answer') answer: string,
    @Body('points') points: number,
  ) {
    await this.questionService.updateQuestion(
      questId,
      question,
      answer,
      points,
    );
    return null;
  }
}
